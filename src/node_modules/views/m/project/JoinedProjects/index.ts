import * as tomato from "@po-to/tomato";
import * as tdom from "@po-to/tomato-jquery";
import * as project from "views/global/common/Project";
import * as funs from "views/global/common/Funs";
import * as model from "views/global/common/Model";
import * as api from "views/global/common/API";
import * as Vue from 'vue';
import chatroom = require('views/m/ChatRoom');

class VPresenter extends project.VPresenter {
    constructor(view: tomato.VPView, parent?: tomato.VPresenter, vpid?: string) {
        super(view, parent, vpid);
        this._watchEvent();
        var that = this;
        // this._els = this._getElements();
        var v_unread = this.find('.topbar')[0];
        var data = model.globalData.unread_num;
        new Vue({
            el: v_unread,
            data: data
        });
        var vue_dom = this.find('.item-list')[0];
        var friends = model.globalData.friend_list;
        var a = new Vue({
            el: vue_dom,
            data: { friends: friends },
            computed: {
                sortByMsgTime: function () {
                    var list = (this as any).friends;
                    list.forEach(element => {
                        if (element.lastMsg) {
                            element.lastMsg.timeGap = that.countTimeGap(element.lastMsg.time);
                            var t: string = element.lastMsg.text;
                            if (t.indexOf('</i>') > 0) {
                                element.lastMsg.text = t.split('</i>')[1];
                            }
                            if (t.indexOf('</data>') > 0) {
                                element.lastMsg.text = t.split('</i>')[1];
                            }
                        }
                    });
                    var msgOrder = list.sort(
                        function (a, b) {
                            if (!a.lastMsg) return 1;
                            if (!b.lastMsg) return -1;
                            if (!a.lastMsg.time) return 1;
                            if (!b.lastMsg.time) return -1;
                            if (a.lastMsg.time < b.lastMsg.time) return 1;
                            if (a.lastMsg.time > b.lastMsg.time) return -1;
                            return 0;
                        }
                    );
                    return msgOrder
                }
            }
        })
    }
    _afterInstallTo() {
        webimConfigs.contactProjectAndSession();
    }
    _evt_openProject(data, obj) {
        var list = model.globalData.joined_list;
        let user_id = $(obj).attr("uid");
        var hasJoined = false;
        for (var i = 0; i < list.length; i++) {
            if (list[i].uid == user_id) {
                model.globalData.current_demand = list[i];
                hasJoined = true;
                break;
            }
        }
        if (!hasJoined) {
            // 如果是客服
            if (user_id == '3') {
                var demand = {
                    type: 1,
                    type_name: "",
                    cate_name: '',
                    status: '10',
                    user: { nick: '万屏汇小秘书', id: '3', phone: '4009980215', sex: 0 },
                    supplier_partic_status: '200',
                    "id": "", //项目ID；
                    "uid": "",
                    "city": "",
                    "prov": "",
                    "cate": "1",
                    "malf": "",
                    "malf_name": "",
                    "address": "",
                    "size": "",
                    "location": 1,  //1 => '户外', 2 => '室内', 3 => '半户外',
                    "color": 1, //1：单色，2：双色，3：全彩
                    "span": "",
                    "budget": 0, //预算，0：表示议价；
                    "budgetFormat": { budget: '', unit: '' },
                    "image": "",	//需求场地图片
                    "intm": 0,
                    "uptm": 0,
                    "note": "",
                    "audio": "", //客服和客户之间的录音链接
                    "bid_fee": 0, //抢单服务费
                    "bid_cnt": 20,
                    "location_name": '户外',
                    "color_name": "单色",
                    "span_id": 1,
                    "supplier_list": []
                };
                model.globalData.current_demand = demand;
                model.globalData.currUserDemandList = [demand];
            } else {
                nim.currSess = user_id;
                api.GetUserDemandList({ uid: user_id }, function (list) {
                    // 可能存在某些项目结束被删除等情况，所以这儿是做一个补漏处理
                    if(list.length == 0){
                        var fl = model.globalData.friend_list;
                        for(var i=0;i<fl.length;i++){
                            if(fl[i].id == user_id){
                                fl.splice(i,1);
                                funs.tip('当前用户已不存在项目','','fail');
                                setTimeout(function(){
                                    window.location.href = '/index.html';
                                },2500);
                            }
                        }
                        return
                    }
                    model.globalData.currUserDemandList = list;
                    model.globalData.current_demand = list[0];
                    tomato.getVPresenter<chatroom>(funs.moduleToUrl('m/ChatRoom'), (chatroom) => {
                        if(list.length == 0){

                        }
                        chatroom.switchSession(user_id);
                    });
                })
            }
        }
        (this.parent as tomato.Dialog).close();
        tomato.getVPresenter<chatroom>(funs.moduleToUrl('m/ChatRoom'), (chatroom) => {
            //弹出聊天
            if(chatroom.vpid.indexOf('uid=') >0){
                chatroom.vpid = chatroom.vpid.replace(/\?(uid=\d*)?/,'?uid='+ user_id);
            }else{
                chatroom.vpid += '?uid='+ user_id;
            }
            funs.loadPage(chatroom);
        });
    }
    countTimeGap(startTime) {
        startTime = startTime + '';
        var text;
        var stime = startTime;
        var date = new Date().getTime();
        var gapMin = Math.floor((date - stime) / 1000 / 60);
        if (gapMin <= 0) {
            //防止偶尔出现的js取时间不准确
            gapMin = 1;
        }
        var gapHour = Math.floor((date - stime) / 1000 / 60 / 60);

        if (gapHour <= 24) {
            text = gapHour + '小时前';
            if (gapMin < 60) {
                text = gapMin + '分钟前';
            }
        } else if (gapHour <= 24 * 30) {
            gapHour = Math.floor(gapHour / 24);
            text = gapHour + '天前'
        } else if (gapHour <= 24 * 30 * 12) {
            gapHour = Math.floor(gapHour / 24 / 30);
            text = gapHour + '个月前'
        } else {
            //防止意外情况，暂时如此处理
            text = '刚刚'
        }
        return text;
    }
}
export = VPresenter;