import * as tomato from "@po-to/tomato";
import * as project from "views/global/common/Project";
import * as funs from "views/global/common/Funs";
import * as model from "views/global/common/Model";
import * as api from "views/global/common/API";
import * as Vue from "vue";
import wallet = require('views/m/user/Wallet');


class VPresenter extends project.VPresenter {
    /**模块 */
    private TransferOuterModal_vue: any;
    /**增加卡号 */
    private addCard: Boolean;
    /**flag */
    private isFirst: Boolean;
    /**提现金额 */
    private getMon;
    /**银行卡号（数字） */
    private cardNum;
    /**银行卡号（简写） */
    private cardShorthand;
    /**开户名 */
    private userName;
    /**错误tip */
    private errorTip: JQuery;
    /**错误data */
    private errorData: JQuery;
    /**用户信息 */
    private user;
    constructor(view: tomato.VPView, parent?: tomato.VPresenter, vpid?: string) {
        super(view, parent, vpid);
        let user = this.user = model.globalData.user;
        let cardShorthand = this.user.bank_name + "(" + this.user.bank_acct_num.substring(0, 4) + ")" + this.user.bank_acct_name;
        let vueDom = this.find("#TransferOuterModal_vue").get(0);
        let TransferOuterModal_vue: any = this.TransferOuterModal_vue = new Vue({
            el: vueDom,
            data: {
                user: user,
                seen: false,
                cardShorthand: cardShorthand

            },
        });
        this.addCard = false;
        this.isFirst = true;
        this.getMon = '';
        this.cardNum = "";
        this.userName = this.user.bank_acct_name;
        this.errorTip = this.find(".error-tip");
        this.errorData = this.find(".error-data");
        let that = this;
        $('input').focus(function () {
            that.errorTip.css("display", "none");
        });
        $('#threeCard').on('focus', function () {
            $(this).val(that.cardNum);
        });
        $('#threeCard').on('blur', function () {
            that.cardNum = $(this).val();
            if (that.cardNum >= 16) {
                let bank_acct_num = that.cardNum;
                let firstFour = bank_acct_num.substring(0, 4);
                let bank_name;
                /**查询开户行 */
                api.getBankNameByBankAcctNum({ bank_acct_num: bank_acct_num }, function (json) {
                    bank_name = json;
                    that.cardShorthand = bank_name + "(" + firstFour + ")";
                    $('#threeCard').val(that.cardShorthand);
                }, function (data: tomato.PError) {
                    funs.tip(data.note, "", "fail");
                });

            }
            that.disabled();
        });
        $(document).on('input propertychange', function () {
            that.disabled();
        });
        this._watchEvent();
        this._els = this._getElements();
    }
    public init() {

        if (this.user.bank_acct_num != "") {
            //如果有银行卡号,显示该界面
            this.isFirst = false;
            this.find('.transferModal').removeClass("hide");
            this.find('.transferMoneyModal').addClass("hide");
            // 将银行卡历史传进去，并秀出来
            this.showCardList(this.user.bank_acct_num, this.user.bank_name, this.user.bank_acct_name);
            this.TransferOuterModal_vue.seen = true;
        } else {
            //没有
            this.find('.transferModal').addClass("hide");
            this.find('.transferMoneyModal').removeClass("hide");
            this.TransferOuterModal_vue.seen = false;
        }
    }
    private deleteInput() {
        this.find('input').val('');
    }
    /**默认用以前的银行卡号弹窗的确认体现 */
    private _evt_conBtn(data, target, hit) {
        let money = $(target).parent().siblings().find('input').val();
        this.cardNum = this.find('.cardNum').text();
        if (this.checkMoney(money, target)) {
            this.getMon = money;
            this.find('.testPhoneModal').removeClass("hide");
            this.find('.testPhoneModal').siblings().addClass("hide");
            this.refresh();
        }
    }
    /**所有为空值时申请提现的下一步 */
    private _evt_nextBtn(data, target, hit) {
        this.addCard = true;
        let parent = $(target).parent().siblings();
        let money = parent.find('.mon').val();
        let card = this.cardNum;
        let name = parent.find('.name').val();
        this.getMon = money;
        // if (card >= 0 && undefined != card) {
        //     this.cardNum = card.match(/\d+/)[0]; // 中国银行(1234n)型，需要匹配出卡号;
        // }
        this.userName = name;
        if (this.checkMoney(money, target) &&
            this.checkCard(card, target) &&
            this.checkName(name, target)) {
            this.find('.testPhoneModal').removeClass("hide");
            this.find('.testPhoneModal').siblings().addClass("hide");
            this.refresh();
        }

    }
    /**手机验证确认体现 */
    private _evt_conMoneyBtn(data, target, hit) {
        let that = this;
        this.addCard = false;
        let code = this.find('.code').val();
        if (!(code >= 0 && undefined != code)) {
            $(that.errorTip[2]).css("display", "block");
            $(that.errorData[2]).text('验证码不能为空');
        } else {
            $(target).attr('evt', '');
            //提现接口
            api.withdraw({ amt: that.getMon, bank_acct_name: that.userName, bank_acct_num: that.cardNum, sms_captcha: code },
                function (json) {
                    that.destroy();
                    (that.parent as tomato.Dialog).close();
                    that.TransferOuterModal_vue.user.balance = json.user.bal;
                    that.TransferOuterModal_vue.user.bank_name = json.user.bank_name;
                    that.TransferOuterModal_vue.user.bank_acct_name = json.user.bank_acct_name;
                    that.TransferOuterModal_vue.user.bank_acct_num = json.user.bank_acct_num;

                    funs.tip('申请成功', '请耐心等待，预计24小时内到账', 'succ', );
                    /**再次查询钱包明细 */
                    tomato.getVPresenter<wallet>(funs.moduleToUrl('m/user/Wallet'), (wallet) => {
                        wallet.init();
                    });

                },
                function (data: tomato.PError) {
                    $(that.errorTip[2]).css("display", "block");
                    $(that.errorData[2]).text(data.note);
                    $(target).attr('evt', 'conMoneyBtn');
                    // funs.tip(data.note, '', 'fail', )
                }
            )
        }

    }
    /**重新发送验证码 */
    private _evt_getCaptcha(data, target, hit) {
        let that = this;
        //发送验证码接口
        api.SendSmsCaptcha(that.user.mobile, function (json) {
            that.find('.sendPhone span').text(that.user.mobile.substring(0, 3) + "****" + that.user.mobile.substring(7, 11));
            that.find('.sendPhone').removeClass("hide");
            that.refresh();
            let time = 60;
            $(target).attr("evt", "");
            let timer = setInterval(function () {
                time--;
                $(target).html(time + 's后重新获取')
                if (time < 1) {
                    clearInterval(timer);
                    this.timer = null;
                    $(target).html('重新获取');
                    $(target).attr("evt", "getCaptcha");
                }
            }, 1000);
        }, function (data: tomato.PError) {
            $(that.errorTip[2]).css("display", "block");
            $(that.errorData[2]).text(data.note);
        });
    }
    /**弹出选择银行卡 */
    private _evt_changeCard() {
        //切换视图
        this.find('.chooseCardModal').removeClass("hide");
        this.find('.transferModal').addClass("hide");
        this.refresh();
    }
    /**使用新卡按钮 */
    private _evt_useNewCard() {
        this.find('.transferMoneyModal').removeClass("hide");
        this.find('.chooseCardModal').addClass("hide");
        this.refresh();
    }
    /**展现以前使用过的银行卡 */
    private showCardList(card_number, bank_name, real_name) {
        /**
         * bank_acct_name
         * bank_acct_num
         * bank_name
        */
        let lastFour = card_number.substring(0, 4);
        let newDiv = this.find('.modal-contents.hide').clone().addClass('list').removeClass("hide");
        newDiv.find('.cardName').text(bank_name + ' (' + lastFour + ') ' + real_name);
        newDiv.find('.cardList').text(card_number);
        newDiv.attr('evt', 'thisCard');
        newDiv.prependTo('.chooseCardModal .modal-body');
    }
    /**为每一张银行卡绑定点击事件 */
    private _evt_thisCard = function (data, target, hit) {
        let which = $(target).find('.cardName').text();
        let thisCard = $(target).find('.cardList').text();
        this.find('.cardNum').text(thisCard);
        this.find('.transferModal .choose').text(which);
        this.find('.transferModal').removeClass("hide");
        this.find('.chooseCardModal').addClass("hide");
        this.refresh();
    }
    /**返回上一级 */
    private _evt_goBack(data, target, hit) {
        let modal = $(target).parent();
        let className = modal.attr('class');
        if (className == 'chooseCardModal') {
            this.find('.transferModal').removeClass("hide");
            modal.addClass("hide")
            this.refresh();
        } else if (className == 'transferMoneyModal') {
            this.find('.chooseCardModal').removeClass("hide");
            modal.addClass("hide");
            this.refresh();
        } else {
            if (this.isFirst || this.addCard) {
                this.find('.transferMoneyModal').removeClass("hide");
                modal.addClass("hide");
                this.refresh();
            } else {
                this.find('.transferModal').removeClass("hide");
                modal.addClass("hide");
                this.refresh();
            }
        }
    }
    /**提现金额检查 */
    private checkMoney(money, target) {
        if (!(parseInt(money) >= 0 && undefined != money)) {
            this.errorTip.css("display", "block");
            this.errorData.text("提现金额不能为空");
            return false;
        } else if (parseInt(money) > parseInt(this.user.balance)) {
            this.errorTip.css("display", "block");
            this.errorData.text("余额不足！请重新输入");
            return false;
        } else if (parseInt(money) == 0) {
            this.errorTip.css("display", "block");
            this.errorData.text("提现金额不能为0");
            return false;
        }
        return true
    }
    /**提现银行卡号检查 */
    private checkCard(card, target) {
        if (!(card >= 0 && undefined != card)) {
            $(this.errorTip[1]).css("display", "block");
            $(this.errorData[1]).text("卡号不能为空！");
            return false;
        }
        return true;
    }
    /**提现开户名检查 */
    private checkName(name, target) {
        if ((name >= 0 && undefined != name)) {
            $(this.errorTip[1]).css("display", "block");
            $(this.errorData[1]).text("开户名不能为空！");
            return false;
        }
        return true;
    }
    /**是否disabled */
    private disabled() {
        this.one('.transferModal', '#oneMoney')
        this.one('.testPhoneModal', '#code')
        this.three('#threeMoney', "#threeCard", "#threeName")
    }
    private one = function (modal, id) {
        if ($(id).val() != '') {
            this.find(modal + ' .one').attr("disabled", false).removeClass('disabled')
        } else {
            this.find(modal + ' .one').attr("disabled", true).addClass('disabled')
        }
    }
    private three = function (id1, id2, id3) {
        /*
        * 2016-11-04  jacques
        * 移除了这个判断条件  ---》 $(id2).val().length<22 ;
        * 原因 : 输入银行卡号后,输入框失去焦点后会自动识别银行卡并加入 银行名称,此时 $(id2).val()的长度远超出22个字符;
        * */

        let that = this;
        if ($(id1).val() != "" && that.cardNum.length >= 16 && $(id3).val() != "") {
            this.find('.three').attr("disabled", false).removeClass('disabled')
        } else {
            this.find('.three').attr("disabled", true).addClass('disabled')
        }
    }
    private refresh() {
        (this.parent as tomato.Dialog).refreshSize();
        (this.parent as tomato.Dialog).refreshPosition();
        (this.parent as tomato.Dialog).refreshLayout();
    }
}
export = VPresenter;