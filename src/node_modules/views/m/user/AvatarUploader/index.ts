import * as tomato from "@po-to/tomato";
import * as project from "views/global/common/Project";
import * as funs from "views/global/common/Funs";
import * as model from "views/global/common/Model";
import * as api from "views/global/common/API";
import * as cropper from "cropper";
import * as canvastoblob from "canvas-to-blob";
import * as binaryajax from "canvasResize/binaryajax";
import * as exif from "canvasResize/exif";
import * as canvasResize2 from "canvasResize/canvasResize";
import updateS = require('views/m/user/UpdateSupplierInfo');

class VPresenter extends project.VPresenter {
    private tempImg: HTMLImageElement;
    private tempimageurl: string;

    constructor(view: tomato.VPView, parent?: tomato.VPresenter, vpid?: string) {
        super(view, parent, vpid);
        var abc = [cropper, canvastoblob, binaryajax, exif, canvasResize2];//hack
        var canvasResize = window['canvasResize'];
        this._watchEvent();
        var that = this;
        var canvas = document.createElement('canvas');
        this.tempImg = document.createElement("img");
        this.tempImg.style.display = "none";
        $('body').append(this.tempImg);
        this.tempImg.onload = function (event) {
            var img = $(this);
            img.width((img[0] as HTMLImageElement).naturalWidth);
            img.height((img[0] as HTMLImageElement).naturalHeight);
            if (img.width() > 200) {//按最大高度等比缩放
                var rate = 200 / img.width();
                img.height(img.height() * rate);
                img.width(200);

            }
            var ctx = canvas.getContext("2d");
            if (ctx) {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                canvas.width = img.width();
                canvas.height = img.height();
                ctx.drawImage(img[0] as HTMLImageElement, 0, 0, img.width(), img.height());
                that.tempimageurl = canvas.toDataURL("image/jpeg");
                that.onDataReady(that.tempimageurl);
            }
        }

        $('#init-select, #re-select').change(function () {
            if (this.files && this.files[0]) {
                if ($('#crop').attr('src').length > 0) {
                    that.clear();
                }

                that.showSelect('#init-select', false);
                that.showSelect('#re-select', true);

                // canvasResize（压缩图片）在android上不能用，见demo: http://gokercebeci.com/dev/canvasresize
                // 结果：android上传的头像偏大
                var file = this.files[0];
                if (funs.isAndroid()) {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        that.tempImg.src = (e.target as any).result;
                        // that.onDataReady(that.tempimageurl);
                    }
                    reader.readAsDataURL(file);
                } else {
                    canvasResize(file, {
                        width: 200,
                        height: 0,
                        crop: false,
                        quality: 100,
                        callback: function (data, width, height) {
                            that.onDataReady(data);
                        }
                    });
                }
            }
        })

        $('#upload').click(function () {
            var canvas: any = $('#crop').cropper('getCroppedCanvas');
            var base64 = canvas.toDataURL('image/jpeg');
            // if (funs.isAndroid() && that.tempimageurl) {base64 = that.tempimageurl;};
            if (base64) {
                api.UploadAvatar({ img: base64.substr(base64.indexOf(",") + 1) }, function (data) {
                    model.globalData.user.avatar = data.url;
                    that.clear();
                    that.showSelect('#init-select', true);
                    that.showSelect('#re-select', false);
                    (that.parent as tomato.Dialog).close();
                    tomato.getVPresenter<updateS>(funs.moduleToUrl('m/user/UpdateSupplierInfo'), (updateS) => {
                        updateS.checkData();
                    });
                })
            } else {
                console.log('抱歉，不支持此浏览器');
            }
        })
    }
    setParams(params) {
        if (params.orgAvatar.length > 0) {
            this.onDataReady(params.orgAvatar);
        }
    }
    onDataReady(data) {
        //ref: https://github.com/fengyuanchen/cropper
        $('#crop').attr('src', data);
        $('#crop').cropper({
            dragMode: 'move',
            aspectRatio: 1,
            autoCropArea: 0.8,
            cropBoxMovable: false,
            cropBoxResizable: false,
            crop: function (e) {
            }
        });
        $('#upload').prop('disabled', false);
    }
    clear() {
        $('#crop').cropper('destroy');
        $('#crop').attr('src', "");
        $('#upload').prop('disabled', true);
    }
    showSelect(jq, b) {
        var label = jq + ' + label';
        if (b) {
            $(jq).removeClass('hide');
            $(label).removeClass('hide');
        } else {
            $(jq).addClass('hide');
            $(label).addClass('hide');
        }
    }
}
export = VPresenter;