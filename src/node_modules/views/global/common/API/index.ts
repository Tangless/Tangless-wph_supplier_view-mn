import * as ptcache from '@po-to/pt-cache';
import * as tomato from '@po-to/tomato';
import * as funs from 'views/global/common/Funs';
import * as model from 'views/global/common/Model';

let apiServer = "`{APIURL}`";
// 发送验证码
export function SendSmsCaptcha(mobile: string, success?: (data: any) => void, fail?: (error: Error) => void): Promise<boolean> {
    return ptcache.load({
        url: apiServer + '/SmsCaptcha/sendSmsCaptcha', data: { mobile: mobile }, method: "post", render: function (data) {
            if (!(data instanceof Error)) {
                if (data.status != 200) {
                    return new tomato.PError(data.status, data.info);
                }
                return data;
            }
            return data;
        }
    }, success, fail);
}
// 登录
export function Login(mobile: string, sms_captcha: string, success?: (data: boolean) => void, fail?: (error: Error) => void): Promise<boolean> {
    return ptcache.load({
        url: apiServer + '/Login/handleLogin', data: { mobile: mobile, sms_captcha: sms_captcha }, method: "post", render: function (data) {
            if (!(data instanceof Error)) {
                funs.setCookie("token", data.token, 1);
            }
            return data;
        }
    }, success, fail);
}
// 登出
export function Logout(success?: (data: boolean) => void, fail?: (error: Error) => void): Promise<boolean> {
    return ptcache.load({
        url: apiServer + '/Login/handleLogout', data: {}, method: "post", render: function (data) {
            if (!(data instanceof Error)) {
                funs.setCookie("token", '');
            }
            return data;
        }
    }, success, fail);
}
// 获取用户信息
export function GetUserInfo(success?: (data: any) => void, fail?: (error: Error) => void): Promise<any> {
    return ptcache.load({
        url: apiServer + '/User/getUserInfo', method: "post", render: function (data) {
            return data.user;
        }
    }, success, fail);
}
// 编辑项目
export function EditDemand(data: { demand_id: number, type: number, size: number, color: number, location: number, span: string, budget: number, address: string, note: string }, success?: (data: boolean) => void, fail?: (error: Error) => void): Promise<boolean> {
    return ptcache.load({
        url: apiServer + '/Demand/updateDemand', data: data, method: "post", render: function (data) {
            if (!(data instanceof Error)) {
                return true;
            }
            return data;
        }
    }, success, fail);
}
// 获取参与的工程商列表
export function GetDemandSupplier(data: { demand_id: number }, success?: (data: any) => void, fail?: (error: Error) => void): Promise<any> {
    return ptcache.load({
        url: apiServer + '/Supplier/getSupplierList4Demand', data: data, method: "post", render: function (data) {
            return data;
        }
    }, success, fail);
}
// 获取聊天群历史纪录
export function GetImHistoryMsgs(data: { toid: number,sort_val:string }, success?: (data: any) => void, fail?: (error: Error) => void): Promise<any> {
    data = $.extend(data, { pagesize: 100, sort: "send_at", order: "desc" })
    return ptcache.load({
        url: apiServer + '/Im/getImList', data: data, method: "post", hideLoading: true, render: function (data) {
            return data;
        }
    }, success, fail);
}
// 工程商发言后更新工程商参与状态
export function UpdateSupplierChatStatus(data: { demand_id: number }, success?: (data: any) => void, fail?: (error: Error) => void): Promise<any> {
    return ptcache.load({
        url: apiServer + '/Supplier/Demand/particAsChat', data: data, method: "post", render: function (data) {
            return data;
        }
    }, success, fail);
}
// 抢单
export function grabDemand(data: { demand_id: string }, success?: (data: any) => void, fail?: (error: Error) => void): Promise<any> {
    return ptcache.load({
        url: apiServer + '/Supplier/Demand/bid', data: data, method: "post", render: function (data) {
            return data;
        }
    }, success, fail);
}
// 充值下单
export function chargeOrder(data: { amt: string }, success?: (data: any) => void, fail?: (error: Error) => void): Promise<any> {
    return ptcache.load({
        url: apiServer + '/Acct/deposit', data: data, method: "post", render: function (data) {
            return data;
        }
    }, success, fail);
}
// 充值验证
export function chargeConfirm(data: { bill_id: string }, success?: (data: any) => void, fail?: (error: Error) => void): Promise<any> {
    return ptcache.load({
        url: apiServer + '/Bill/getBill', data: data, method: "post", render: function (data) {
            if (!(data instanceof Error)) {
                if (data.status != 200) {
                    return new tomato.PError(data.status, data.info);
                }
                if(data.bill.status == 0){
                    return new tomato.PError("401","充值未完成");
                }
                return data.bill
            }
            return data;
        }
    }, success, fail);
}
// 激活工程商
export function activeSupplier(data: { nickname: string }, success?: (data: any) => void, fail?: (error: Error) => void): Promise<any> {
    return ptcache.load({
        url: apiServer + '/Supplier/Supplier/activate', data: data, method: "post", render: function (data) {
            return data;
        }
    }, success, fail);
}
// 获取项目信息
export function GetDemandInfo(data: { id: number }, success?: (data: any) => void, fail?: (error: Error) => void): Promise<any> {
    return ptcache.load({
        url: apiServer + '/Demand/getInfo', data: data, method: "post", render: function (data) {
            return data;
        }
    }, success, fail);
}
// 更新用户信息
export function SetUserInfo(data: any, success?: (data: boolean) => void, fail?: (error: Error) => void): Promise<boolean> {
    return ptcache.load({
        url: apiServer + '/User/updateUser', data: data, method: "post", render: function (data) {
            return data;
        }
    }, success, fail);
}
// 获取收支明细
export function getBillList(data: { type?: number, sort?: string, order?: string, sort_val?: string, pagesize?: number }, success?: (data: any) => void, fail?: (error: Error) => void): Promise<boolean> {
    return ptcache.load({
        url: apiServer + '/Bill/getBillList', data: data, method: "post", render: function (data) {
            if (!(data instanceof Error)) {
                if (data.status != 200) {
                    return new tomato.PError(data.status, data.info);
                }
                return { list: data.list };
            }
            console.log(data)
            return data;
        }
    }, success, fail);
}
// 获取银行名称
export function getBankNameByBankAcctNum(data: { bank_acct_num: string }, success?: (data: any) => void, fail?: (error: Error) => void): Promise<boolean> {
    return ptcache.load({
        url: apiServer + '/Bank/getBankNameByBankAcctNum', data: data, method: "post", render: function (data) {
            if (!(data instanceof Error)) {
                if (data.status != 200) {
                    return new tomato.PError(data.status, data.info);
                }
                return data.bank_name;
            }
            return data;
        }
    }, success, fail);
}
// 开通短信增值服务
export function openSmsVas(data: { prov: string, month_cnt: number, amt: number }, success?: (data: any) => void, fail?: (error: Error) => void): Promise<boolean> {
    return ptcache.load({
        url: apiServer + '/Supplier/SmsVas/openSmsVas', data: data, method: "post", render: function (data) {
            if (!(data instanceof Error)) {
                if (data.status != 200) {
                    return new tomato.PError(data.status, data.info);
                }
                return data;
            }
            return data;
        }
    }, success, fail);
}
// 提现
export function withdraw(data: { amt: number, bank_acct_name: string, bank_acct_num: string, sms_captcha: string }, success?: (data: any) => void, fail?: (error: Error) => void): Promise<boolean> {
    return ptcache.load({
        url: apiServer + '/Acct/withdraw', data: data, method: "post", render: function (data) {
            if (!(data instanceof Error)) {
                if (data.status != 200) {
                    return new tomato.PError(data.status, data.info);
                }
                return data;
            }
            return data;
        }
    }, success, fail);
}
// 上传头像
export function UploadAvatar(data: { img: string }, success?: ({url: string}) => void, fail?: (error: Error) => void): Promise<{ url: string }> {
    return ptcache.load({
        url: apiServer + '/Img/uploadAvatar', data: data, method: "post", render: function (data) {
            if (!(data instanceof Error)) {
                if (data.status != 200) {
                    return new tomato.PError(data.status, data.info);
                }
                return { url: data.img };
            }
            return data;
        }
    }, success, fail);
}
// 获取某个客户的所有的项目列表
export function GetUserDemandList(data: { uid: string }, success?: (data:any) => void, fail?: (error: Error) => void): Promise<any> {
    return ptcache.load({
        url: apiServer + '/Supplier/Demand/getList4User', data: data, method: "post", render: function (data) {
            if (!(data instanceof Error)) {
                if (data.status != 200) {
                    return new tomato.PError(data.status, data.info);
                }
                data = data.list.map(function (item) {
                    return mappingDemand(item);
                });
                return data;
            }
            return data;
        }
    }, success, fail);
}
// 获取项目列表(翻页用)
export function GetDemandList(data: { sort_val: string, province?: string, type?: string, sort?: string, pagesize?: number }, success?: (data: any) => void, fail?: (error: Error) => void): Promise<any> {
    data = $.extend({}, data, { pagesize: 20, sort: "created_at",prov: model.globalData.selected_province.province_id});
    return ptcache.load({
        url: apiServer + '/Demand/getDemandList', data: data, method: "post", render: function (data) {
            if (!(data instanceof Error)) {
                if (data.status != 200) {
                    return new tomato.PError(data.status, data.info);
                }
                data = data.list.map(function (item) {
                    return mappingDemand(item);
                });
                return data;
            }
            return data;
        }
    }, success, fail);
}
// 
let demand_config = {
    typeOptions: {
        1: {
            name: '门头屏', id: '1', def: {
                location: '3', color: '1', span: '3',
                locationOptions: { 1: { name: '户外', id: '1' }, 2: { name: '室内', id: '2' }, 3: { name: '半户外', id: '3' } },
                colorOptions: { 1: { name: '单色', id: '1' }, 2: { name: '双色', id: '2' }, 3: { name: '全彩', id: '3' } },
                spanOptions: { 1: { name: 'P6', id: '1' }, 2: { name: 'P8', id: '2' }, 3: { name: 'P10', id: '3' }, 4: { name: '其他', id: '4' }, },
            }
        },
        2: {
            name: '户外广告屏', id: '2', def: {
                location: '1', color: '3', span: '3',
                locationOptions: { 1: { name: '户外', id: '1' } },
                colorOptions: { 1: { name: '单色', id: '1' }, 2: { name: '双色', id: '2' }, 3: { name: '全彩', id: '3' } },
                spanOptions: { 1: { name: 'P6', id: '1' }, 2: { name: 'P8', id: '2' }, 3: { name: 'P10', id: '3' }, 4: { name: '其他', id: '4' }, },
            }
        },
        3: {
            name: '信息告示屏', id: '3', def: {
                location: '1', color: '1', span: '3',
                locationOptions: { 1: { name: '户外', id: '1' }, 2: { name: '室内', id: '2' }, 3: { name: '半户外', id: '3' } },
                colorOptions: { 1: { name: '单色', id: '1' }, 2: { name: '双色', id: '2' }, 3: { name: '全彩', id: '3' } },
                spanOptions: { 1: { name: 'P6', id: '1' }, 2: { name: 'P8', id: '2' }, 3: { name: 'P10', id: '3' }, 4: { name: '其他', id: '4' }, },
            }
        },
        4: {
            name: '舞台用屏', id: '4', def: {
                location: '2', color: '3', span: '2',
                locationOptions: { 1: { name: '户外', id: '1' }, 2: { name: '室内', id: '2' }, 3: { name: '半户外', id: '3' } },
                colorOptions: { 1: { name: '单色', id: '1' }, 2: { name: '双色', id: '2' }, 3: { name: '全彩', id: '3' } },
                spanOptions: { 1: { name: 'P3', id: '1' }, 2: { name: 'P4', id: '2' }, 3: { name: 'P5', id: '3' }, 4: { name: '其他', id: '4' } }
            }
        },
        5: {
            name: '室内高清屏', id: '5', def: {
                location: '2', color: '3', span: '2',
                locationOptions: { 2: { name: '室内', id: '2' } },
                colorOptions: { 1: { name: '单色', id: '1' }, 2: { name: '双色', id: '2' }, 3: { name: '全彩', id: '3' } },
                spanOptions: { 1: { name: 'P1.25', id: '1' }, 2: { name: 'P2.0', id: '2' }, 3: { name: 'P2.5', id: '3' }, 4: { name: '其他', id: '4' } }
            }
        },
        0: {
            name: '其他', id: '0', def: {
                location: '1', color: '3', span: '3',
                locationOptions: { 1: { name: '户外', id: '1' }, 2: { name: '室内', id: '2' }, 3: { name: '半户外', id: '3' } },
                colorOptions: { 1: { name: '单色', id: '1' }, 2: { name: '双色', id: '2' }, 3: { name: '全彩', id: '3' } },
                spanOptions: { 1: { name: 'P6', id: '1' }, 2: { name: 'P8', id: '2' }, 3: { name: 'P10', id: '3' }, 4: { name: '其他', id: '4' } },
            }
        }
    },
    locationOptions: {
        1: { name: '户外', id: '1' },
        2: { name: '室内', id: '2' },
        3: { name: '半户外', id: '3' }
    },
    colorOptions: {
        1: { name: '单色', id: '1' },
        2: { name: '双色', id: '2' },
        3: { name: '全彩', id: '3' }
    },
    spanOptions: {
        1: { name: 'P6', id: '1' },
        2: { name: 'P8', id: '2' },
        3: { name: 'P10', id: '3' },
        4: { name: '其他', id: '4' },
    },
    faultOptions: {
        1: { name: '整屏或部分不亮', id: '1' },
        2: { name: '出现亮点暗点', id: '2' },
        3: { name: '有色彩问题', id: '3' },
        4: { name: '无法更换屏幕内容', id: '4' },
        5: { name: '屏幕移位', id: '5' },
        0: { name: '其他', id: '0' }
    },
    
};
let demand_cate = {
    "1": '安装',
    "2": '维修'
}
export function budget(money: number): { budget: string, unit: string } {
    function std_money_format_in_th(money) {
        money = money + "";
        var intLen = money.split('.')[0].length;
        if (intLen > 4) {
            return { "budget": std_num_format(money / 10000), "unit": "万" }
        } else if (intLen > 3) {
            return { "budget": std_num_format(money / 1000), "unit": "千" }
        } else if (intLen > 2) {
            return { "budget": std_num_format(money / 100), "unit": "百" }
        } else {
            return { "budget": money, "unit": "" };
        }
    }
    function std_num_format(num) {
        num += '';
        var parts = num.split('.');
        var float_cnt = 0;
        if (parts.length > 1) {
            var deci = parts[1];
            float_cnt = (parseInt(deci) > 0) ? deci.length : 0;
        }

        var pureRes = number_format(num, Math.min(2, float_cnt));
        var ptIndex = pureRes.indexOf('.');
        if (ptIndex === -1) {
            // 整数
            return pureRes;
        } else {
            // 下面这些处理，是为了死也要保证小数点后末尾不能为0。即使这是不科学的四舍五入，产品及相关人员也认为这比科学要更好。好吧，我妥协
            var num: any = parseInt(pureRes.substr(ptIndex + 1));
            if (0 === num) {
                // 123.00型
                return pureRes.substr(0, ptIndex);
            } else if (0 === num % 10) {
                // 123.40型
                return pureRes.substr(0, pureRes.length - 1);
            } else {
                return pureRes;
            }
        }
    }
    function number_format(number, decimals, decPoint?, thousandsSep?) { // eslint-disable-line camelcase

        number = (number + '').replace(/[^0-9+\-Ee.]/g, '')
        var n = !isFinite(+number) ? 0 : +number
        var prec = !isFinite(+decimals) ? 0 : Math.abs(decimals)
        var sep = (typeof thousandsSep === 'undefined') ? ',' : thousandsSep
        var dec = (typeof decPoint === 'undefined') ? '.' : decPoint
        var s: any = '';
        var toFixedFix = function (n, prec) {
            var k = Math.pow(10, prec)
            return '' + (Math.round(n * k) / k)
                .toFixed(prec)
        }
        // @todo: for IE parseFloat(0.55).toFixed(0) = 0;
        s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.')
        if (s[0].length > 3) {
            s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep)
        }
        if ((s[1] || '').length < prec) {
            s[1] = s[1] || ''
            s[1] += new Array(prec - s[1].length + 1).join('0')
        }

        return s.join(dec)
    }
    let data = std_money_format_in_th(money);
    if (data.budget == "" || data.budget == 0) {
        data.budget = "";
    }
    return data;
    // if (money.budget == "" || money.budget == 0) {
    //     money.budget = "议价";
    // }
    // return money;
    // this.find('.format-budget').html(money.budget).next('.budget-unit').html(money.unit);
}
export function mappingDemand(json: any) {
    let demand = Object.assign({}, json, json.demand);
    delete demand.demand;
    if (!demand.cate) { demand.cate = "1" };
    if (demand.surr ==0) { demand.surr = "1" };
    if (!demand.color || demand.color == 0) { demand.color = "1" };
    demand.cate_name = demand_cate[demand.cate];
    demand.type_name = demand_config.typeOptions[demand.type].name;
    demand.location_name = demand_config.locationOptions[demand.surr].name;
    demand.color_name = demand_config.colorOptions[demand.color].name;
    demand.malf_name = demand_config.faultOptions[demand.malf].name;
    demand.location = demand.surr;
    demand.image = demand.img;
    demand.note = demand.remark;
    demand.intm = parseInt(demand.created_at);
    demand.uptm = parseInt(demand.updated_at);
    demand.address = demand.addr;
    demand.supplier_list = demand.partic_supplier_list;
    demand.user.sex = demand.user.gender;
    demand.user.phone = demand.user.mobile || '';
    demand.user.nick = demand.user.nickname;
    demand.supplier_list.forEach(function (item) {
        item.company_name = item.com;
        item.nick = item.nickname;
        delete item.com;
        delete item.nickname;
    })
    demand.lastMsg ='';
    demand.im_unread = 0;
    demand.budgetFormat = budget(demand.budget);
    delete demand.surr;
    delete demand.img;
    delete demand.addr;
    delete demand.remark;
    delete demand.created_at;
    delete demand.updated_at;
    delete demand.partic_supplier_list;
    delete demand.gender;
    delete demand.user.mobile;
    delete demand.user.nickname;
    delete demand.user.gender;

    return demand;
}
declare let exports: any;
window['api'] = exports;