import * as potato from '@po-to/potato';
import * as user from 'nodejs/global/model/user';
import * as city from 'nodejs/global/model/city';
import * as province from 'nodejs/global/model/province';
import * as init from 'nodejs/global/model/init';
import * as demand from 'nodejs/global/model/demand';

let emptyFailHandler = function () { }
let apiServer = "`{APIURL}`";
let ApiDomain = apiServer.substr(apiServer.indexOf("//") + 2);

let demand_config = {
    typeOptions: {
        1: {
            name: '门头屏', id: '1', def: {
                location: '3', color: '1', span: '3',
                locationOptions: { 1: { name: '户外', id: '1' }, 2: { name: '室内', id: '2' }, 3: { name: '半户外', id: '3' } },
                colorOptions: { 1: { name: '单色', id: '1' }, 2: { name: '双色', id: '2' }, 3: { name: '全彩', id: '3' } },
                spanOptions: { 1: { name: 'P6', id: '1' }, 2: { name: 'P8', id: '2' }, 3: { name: 'P10', id: '3' }, 4: { name: '其他', id: '4' }, },
            }
        },
        2: {
            name: '户外广告屏', id: '2', def: {
                location: '1', color: '3', span: '3',
                locationOptions: { 1: { name: '户外', id: '1' } },
                colorOptions: { 1: { name: '单色', id: '1' }, 2: { name: '双色', id: '2' }, 3: { name: '全彩', id: '3' } },
                spanOptions: { 1: { name: 'P6', id: '1' }, 2: { name: 'P8', id: '2' }, 3: { name: 'P10', id: '3' }, 4: { name: '其他', id: '4' }, },
            }
        },
        3: {
            name: '信息告示屏', id: '3', def: {
                location: '1', color: '1', span: '3',
                locationOptions: { 1: { name: '户外', id: '1' }, 2: { name: '室内', id: '2' }, 3: { name: '半户外', id: '3' } },
                colorOptions: { 1: { name: '单色', id: '1' }, 2: { name: '双色', id: '2' }, 3: { name: '全彩', id: '3' } },
                spanOptions: { 1: { name: 'P6', id: '1' }, 2: { name: 'P8', id: '2' }, 3: { name: 'P10', id: '3' }, 4: { name: '其他', id: '4' }, },
            }
        },
        4: {
            name: '舞台用屏', id: '4', def: {
                location: '2', color: '3', span: '2',
                locationOptions: { 1: { name: '户外', id: '1' }, 2: { name: '室内', id: '2' }, 3: { name: '半户外', id: '3' } },
                colorOptions: { 1: { name: '单色', id: '1' }, 2: { name: '双色', id: '2' }, 3: { name: '全彩', id: '3' } },
                spanOptions: { 1: { name: 'P3', id: '1' }, 2: { name: 'P4', id: '2' }, 3: { name: 'P5', id: '3' }, 4: { name: '其他', id: '4' } }
            }
        },
        5: {
            name: '室内高清屏', id: '5', def: {
                location: '2', color: '3', span: '2',
                locationOptions: { 2: { name: '室内', id: '2' } },
                colorOptions: { 1: { name: '单色', id: '1' }, 2: { name: '双色', id: '2' }, 3: { name: '全彩', id: '3' } },
                spanOptions: { 1: { name: 'P1.25', id: '1' }, 2: { name: 'P2.0', id: '2' }, 3: { name: 'P2.5', id: '3' }, 4: { name: '其他', id: '4' } }
            }
        },
        0: {
            name: '其他', id: '0', def: {
                location: '1', color: '3', span: '3',
                locationOptions: { 1: { name: '户外', id: '1' }, 2: { name: '室内', id: '2' }, 3: { name: '半户外', id: '3' } },
                colorOptions: { 1: { name: '单色', id: '1' }, 2: { name: '双色', id: '2' }, 3: { name: '全彩', id: '3' } },
                spanOptions: { 1: { name: 'P6', id: '1' }, 2: { name: 'P8', id: '2' }, 3: { name: 'P10', id: '3' }, 4: { name: '其他', id: '4' } },
            }
        }
    },
    locationOptions: {
        1: { name: '户外', id: '1' },
        2: { name: '室内', id: '2' },
        3: { name: '半户外', id: '3' }
    },
    colorOptions: {
        1: { name: '单色', id: '1' },
        2: { name: '双色', id: '2' },
        3: { name: '全彩', id: '3' }
    },
    spanOptions: {
        1: { name: 'P6', id: '1' },
        2: { name: 'P8', id: '2' },
        3: { name: 'P10', id: '3' },
        4: { name: '其他', id: '4' },
    },
    faultOptions: {
        1: { name: '整屏或部分不亮', id: '1' },
        2: { name: '出现亮点暗点', id: '2' },
        3: { name: '有色彩问题', id: '3' },
        4: { name: '无法更换屏幕内容', id: '4' },
        5: { name: '屏幕移位', id: '5' },
        0: { name: '其他', id: '0' }
    },

};
let demand_cate = {
    "1": '安装',
    "2": '维修'
}
let supplier_vas =
    [ //仅工程商有
        // {
        //     type: 1,
        //     prov: "广东省",
        //     start_date: "2015-08-12",
        //     end_date: "2016-11-13",
        // },
        // {
        //     type: 1,
        //     prov: "四川省",
        //     start_date: "2015-08-12",
        //     end_date: "2017-11-13",
        // }
    ]
let demand_empty = {
    "user": {
        id: '',
        nick: '',
        sex: 0,
        phone: ''
    },
    "id": "", //项目ID；
    "uid": "",
    "city": "",
    "prov": "",
    "cate": "1",
    "cate_name": "安装",
    "malf": "",
    "malf_name": "",
    "address": "",
    "type": 2,	//分类：0：其它；1：门头招牌；2：户外广告牌；3：信息告示牌；4：舞台用屏；5：室内高清屏；
    "size": "",
    "location": 1,  //1 => '户外', 2 => '室内', 3 => '半户外',
    "color": 1, //1：单色，2：双色，3：全彩
    "span": "",
    "budget": 0, //预算，0：表示议价；
    "budgetFormat": budget(0),
    "image": "",	//需求场地图片
    "status": "", //10进行中，60：交易结束
    "intm": 0,
    "uptm": 0,
    "note": "",
    "audio": "", //客服和客户之间的录音链接
    "bid_fee": 0, //抢单服务费
    "bid_cnt": 20,
    "supplier_partic_status": '0',
    "type_name": "户外广告屏",
    "location_name": '户外',
    "color_name": "单色",
    "span_id": 1,
    "supplier_list": []
}
function budget(money: number): { budget: string, unit: string } {
    function std_money_format_in_th(money) {
        money = money + "";
        var intLen = money.split('.')[0].length;
        if (intLen > 4) {
            return { "budget": std_num_format(money / 10000), "unit": "万" }
        } else if (intLen > 3) {
            return { "budget": std_num_format(money / 1000), "unit": "千" }
        } else if (intLen > 2) {
            return { "budget": std_num_format(money / 100), "unit": "百" }
        } else {
            return { "budget": money, "unit": "" };
        }
    }
    function std_num_format(num) {
        num += '';
        var parts = num.split('.');
        var float_cnt = 0;
        if (parts.length > 1) {
            var deci = parts[1];
            float_cnt = (parseInt(deci) > 0) ? deci.length : 0;
        }

        var pureRes = number_format(num, Math.min(2, float_cnt));
        var ptIndex = pureRes.indexOf('.');
        if (ptIndex === -1) {
            // 整数
            return pureRes;
        } else {
            // 下面这些处理，是为了死也要保证小数点后末尾不能为0。即使这是不科学的四舍五入，产品及相关人员也认为这比科学要更好。好吧，我妥协
            var num: any = parseInt(pureRes.substr(ptIndex + 1));
            if (0 === num) {
                // 123.00型
                return pureRes.substr(0, ptIndex);
            } else if (0 === num % 10) {
                // 123.40型
                return pureRes.substr(0, pureRes.length - 1);
            } else {
                return pureRes;
            }
        }
    }
    function number_format(number, decimals, decPoint?, thousandsSep?) { // eslint-disable-line camelcase

        number = (number + '').replace(/[^0-9+\-Ee.]/g, '')
        var n = !isFinite(+number) ? 0 : +number
        var prec = !isFinite(+decimals) ? 0 : Math.abs(decimals)
        var sep = (typeof thousandsSep === 'undefined') ? ',' : thousandsSep
        var dec = (typeof decPoint === 'undefined') ? '.' : decPoint
        var s: any = '';
        var toFixedFix = function (n, prec) {
            var k = Math.pow(10, prec)
            return '' + (Math.round(n * k) / k)
                .toFixed(prec)
        }
        // @todo: for IE parseFloat(0.55).toFixed(0) = 0;
        s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.')
        if (s[0].length > 3) {
            s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep)
        }
        if ((s[1] || '').length < prec) {
            s[1] = s[1] || ''
            s[1] += new Array(prec - s[1].length + 1).join('0')
        }

        return s.join(dec)
    }
    let data = std_money_format_in_th(money);
    if (data.budget == "" || data.budget == 0) {
        data.budget = "";
    }
    return data;
    // if (money.budget == "" || money.budget == 0) {
    //     money.budget = "议价";
    // }
    // return money;
    // this.find('.format-budget').html(money.budget).next('.budget-unit').html(money.unit);
}
export function GetIpLocation(rootRequest: potato.RootRequest, data: { ip?: string }, success?: (data: any) => void, fail?: (error: potato.PError) => void): Promise<any> {
    data.ip = data.ip || rootRequest.getIP();
    return potato.callApi({
        url: apiServer + '/Ip/getIpInfo', data: data, method: "POST", context: rootRequest, render: function (data) {
            let result = {
                city: {
                    city_id: '北京市',
                    city_name: '北京市',
                },
                province: {
                    province_id: '北京市',
                    province_name: '北京市',
                }
            };
            data = JSON.parse(data);
            if (data.status == 200) {
                // ip定位城市信息
                result = {
                    city: {
                        city_id: data.ip_info.city,
                        city_name: data.ip_info.city,
                    },
                    province: {
                        province_id: data.ip_info.prov,
                        province_name: data.ip_info.prov,
                    }
                }
            }
            return result
        }
    })
}
export function GetInitData(rootRequest: potato.RootRequest, data: { demand?: string, uid?: string, token?: string }, success?: (data: init.InitData) => void, fail?: (error: potato.PError) => void): Promise<init.InitData> {
    if (data.token) {
        rootRequest.setCookie(ApiDomain + '$token', data.token);
        rootRequest.assignCookie(ApiDomain + '$token', data.token);
    }
    return GetIpLocation(rootRequest, {}).then(function (ipInfo) {
        // 在cookie中存入当前ip所在省份
        rootRequest.setCookie(ApiDomain + '$ip_prov', ipInfo.province.province_name);
        return Promise.all([
            GetInit(rootRequest, { prov: ipInfo.province.province_name }),
            GetDemandList(rootRequest, { prov: ipInfo.province.province_name }),
            GetCurDemandInfo(rootRequest, data.demand),
            GetList4User(rootRequest, data.uid)
        ]).then(function (list: any) {
            let city = ipInfo.city;
            let province = ipInfo.province;
            let sel_province: province.ProvinceInfo = list[0].selected_province;
            let userInfo: user.UserInfo = list[0].user;
            let joined_list = list[0].partic_demand_list;
            let friend_list = list[0].friend_list;
            let supplier_vas = list[0].supplier_vas;
            let demand: demand.DemandInfo = list[0].my_demand_info;
            let demand_list: demand.DemandInfo[] = list[1];
            let current_demand: demand.DemandInfo = data.demand ? list[2] : list[3][0];
            let currUserDList = list[3];
            let result: init.InitData = {
                user: userInfo,
                city: city,
                province: province,
                selected_city: city,
                selected_province: sel_province,
                demand: demand,
                current_demand: current_demand,
                demand_config: demand_config,
                supplier_vas: supplier_vas,
                unread_num: {
                    group_unread: '0',
                    private_unread: '0'
                },
                project_list: demand_list,
                currIsSelfDemand: false,
                joined_list: joined_list,
                currUserDemandList: currUserDList,
                friend_list: mappingFriends(joined_list)
            };
            success && success(result);
            return result;
        }).catch(fail || emptyFailHandler);
    })
}
function mappingUser(json: any): user.UserInfo {
    json.user_type = parseInt(json.type);
    json.user_id = json.id;
    json.position = json.pos || "";
    json.company_name = json.com || "";
    json.sex = json.gender || 1;
    json.address = json.addr || "";
    json.balance = json.bal || "";
    json.nick = json.nickname || "";
    json.avatar = json.avatar || "https://sapp.wanpinghui.com/m/ChatRoomTpl/images/supplier.jpg";
    delete json.type;
    delete json.id;
    delete json.gender;
    delete json.pos;
    delete json.com;
    delete json.addr;
    delete json.bal;
    delete json.nickname;
    return json;
}
function mappingDemand(json: any): demand.DemandInfo {
    let demand = Object.assign({}, json, json.demand);
    delete demand.demand;
    if (!demand.cate) { demand.cate = "1" };
    if (demand.surr == 0) { demand.surr = "1" };
    if (!demand.color || demand.color == 0) { demand.color = "1" };
    demand.cate_name = demand_cate[demand.cate];
    demand.type_name = demand_config.typeOptions[demand.type].name;
    demand.location_name = demand_config.locationOptions[demand.surr].name;
    demand.color_name = demand_config.colorOptions[demand.color].name;
    demand.malf_name = demand_config.faultOptions[demand.malf].name;
    demand.location = demand.surr;
    demand.image = demand.img;
    demand.note = demand.remark;
    demand.intm = parseInt(demand.created_at);
    demand.uptm = parseInt(demand.updated_at);
    demand.address = demand.addr;
    demand.supplier_list = demand.partic_supplier_list;
    demand.user.sex = demand.user.gender;
    demand.user.phone = demand.user.mobile || '';
    demand.user.nick = demand.user.nickname;
    demand.supplier_list.forEach(function (item) {
        item.company_name = item.com;
        item.nick = item.nickname;
        delete item.com;
        delete item.nickname;
    })
    demand.lastMsg = '';
    demand.im_unread = 0;
    demand.budgetFormat = budget(demand.budget);
    delete demand.surr;
    delete demand.img;
    delete demand.addr;
    delete demand.remark;
    delete demand.created_at;
    delete demand.updated_at;
    delete demand.partic_supplier_list;
    delete demand.gender;
    delete demand.user.mobile;
    delete demand.user.nickname;
    delete demand.user.gender;

    return demand;
}
function mappingFriends(list: any) {
    var friend_list: any = [];
    var friends: any = [{
        id: '3',
        nick: '万屏汇小秘书',
        phone: '',
        sex: '0',
        im_unread: 0,
        lastMsg: ''
    }];
    list.forEach(demand => {
        friend_list[demand.user.id] = demand.user;
        friend_list[demand.user.id].im_unread = 0;
        friend_list[demand.user.id].lastMsg = '';
    });
    for (var key in friend_list) {
        if(key && friend_list[key] != [] && friend_list[key].length != 0){
            friends.push(friend_list[key]);
        }
    }
    return friends
}
export function GetDemandList(rootRequest: potato.RootRequest, data: { prov: string }, success?: (data: demand.DemandInfo[]) => void, fail?: (error: potato.PError) => void): Promise<demand.DemandInfo[]> {
    // 先查询是否有选择的城市的cookie
    let cookies: any = rootRequest.getCookie();
    let selProv = cookies[ApiDomain + '$selected_prov'];
    // cookie中是否存在选择的城市
    let cookie_slected_prov: any = '';
    if (selProv) {
        data = {
            prov: selProv
        };
    }
    var time = new Date().getTime();
    Object.assign(data, { sort: "created_at", sort_val: time, cnt: 20 })
    return potato.callApi({
        url: apiServer + '/Demand/getDemandList', data: data, method: "POST", context: rootRequest, render: function (data) {
            let result: demand.DemandInfo[], json: { status: number, info: string, list: any[] };
            if (data instanceof potato.PError) {
                json = { status: 500 } as any;
            } else {
                json = JSON.parse(data);
            }
            if (json.status == 200) {
                result = json.list.map(function (item) {
                    return mappingDemand(item);
                })
            } else {
                result = [];
            }
            return result;
        }
    }, success, fail);
}
export function GetInit(rootRequest: potato.RootRequest, data: { prov: string }, success?: (data: any) => void, fail?: (error: potato.PError) => void): Promise<any> {
    // 先查询是否有选择的城市的cookie
    let ipProv = data.prov;
    let cookies: any = rootRequest.getCookie();
    let selProv = cookies[ApiDomain + '$selected_prov'];
    // cookie中是否存在选择的城市
    let cookie_slected_prov: any = '';
    if (selProv) {
        data = {
            prov: selProv,
        };
        cookie_slected_prov = {
            province_id: selProv,
            province_name: selProv
        }
    }
    return potato.callApi({
        url: apiServer + '/Index/getInitData', data: data, method: "POST", context: rootRequest, render: function (data) {
            let result, json: any;
            if (data instanceof potato.PError) {
                return data;
            } else {
                json = JSON.parse(data);
            }
            if (json.status == 200) {
                // ip定位城市信息
                json.selected_province = {
                    province_id: ipProv,
                    province_name: ipProv
                }
                // 如果cookie中存在已选择的城市
                if (cookie_slected_prov) {
                    json.selected_province = cookie_slected_prov;
                }
                // 用户信息
                json.user = mappingUser(json.user);
                // 自己发布的项目信息
                if (json.my_demand_info == null) { json.my_demand_info = demand_empty } else { json.my_demand_info = mappingDemand(json.my_demand_info); }
                // 参与的项目列表
                json.partic_demand_list = json.partic_demand_list.map(function (item) {
                    return mappingDemand(item);
                });
                // 已开通的增值服务列表
                json.supplier_vas = json.sms_vas_list;
                result = json;
            } else {
                return new potato.PError('404', "服务器请求错误");
            }
            return result;
        }
    }, success, fail);
}
export function GetCurDemandInfo(rootRequest: potato.RootRequest, demand_id?: string, success?: (data: demand.DemandInfo) => void, fail?: (error: potato.PError) => void): Promise<demand.DemandInfo> {
    if (!demand_id) {
        success && success(demand_empty);
        return Promise.resolve(demand_empty);
    }
    return potato.callApi({
        url: apiServer + '/Demand/getInfo', data: { id: demand_id }, method: "POST", context: rootRequest, render: function (data) {
            let result: demand.DemandInfo, json: { status: number, info: string };
            if (data instanceof potato.PError) {
                json = { status: 500 } as any;
            } else {
                json = JSON.parse(data);
            }
            if (json.status == 200 && (json as any).info) {
                result = mappingDemand((json as any).info);
            } else {
                result = demand_empty;
            }
            return result;
        }
    }, success, fail);
}
export function GetList4User(rootRequest: potato.RootRequest, uid?: string, success?: (data: demand.DemandInfo[]) => void, fail?: (error: potato.PError) => void): Promise<demand.DemandInfo[]> {
    if (!uid) {
        success && success([demand_empty]);
        return Promise.resolve([demand_empty]);
    }
    return potato.callApi({
        url: apiServer + '/Supplier/Demand/getList4User', data: { uid: uid }, method: "POST", context: rootRequest, render: function (data) {
            let result: demand.DemandInfo[], json: { status: number, info: string };
            if (data instanceof potato.PError) {
                json = { status: 500 } as any;
            } else {
                json = JSON.parse(data);
            }
            if (json.status == 200 && (json as any).list) {
                result = (json as any).list.map(function (item) {
                    return mappingDemand((item));
                })
            } else {
                result = [demand_empty];
            }
            return result;
        }
    }, success, fail);
}